name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  auto-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine diff range for version analysis
        id: diff-range
        run: |
          # First try to use the push event's before/after
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            DIFF_RANGE="${{ github.event.before }}..${{ github.sha }}"
            echo "Using push event range: $DIFF_RANGE"
            echo "diff-range=$DIFF_RANGE" >> $GITHUB_OUTPUT
            exit 0
          fi

          # If no push event range, try to get last release commit
          echo "No push event range available, checking for last release..."
          LAST_RELEASE_COMMIT=""

          # Try to get latest release, handling 404 for first release gracefully
          if RELEASE_RESPONSE=$(gh api repos/${{ github.repository }}/releases/latest 2>/dev/null); then
            LAST_RELEASE_COMMIT=$(echo "$RELEASE_RESPONSE" | jq -r '.target_commitish // ""')
            echo "Found latest release with commit: $LAST_RELEASE_COMMIT"
          else
            echo "No releases found (this may be the first release) - using fallback diff range"
            LAST_RELEASE_COMMIT=""
          fi

          if [ -n "$LAST_RELEASE_COMMIT" ]; then
            DIFF_RANGE="${LAST_RELEASE_COMMIT}..${{ github.sha }}"
            echo "Using last release commit as base: $DIFF_RANGE"
            echo "diff-range=$DIFF_RANGE" >> $GITHUB_OUTPUT
          else
            echo "No releases found, using default: HEAD~1..HEAD"
            echo "diff-range=HEAD~1..HEAD" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto Version Bump
        id: version
        uses: ./
        with:
          gemini-api-key: ${{ secrets.GEMINI_API_KEY }}
          project-type: 'generic'
          main-files: 'action.yml,README.md'
          diff-range: ${{ steps.diff-range.outputs.diff-range }}

      - name: Create GitHub Release
        if: steps.version.outputs.version-bumped == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_VERSION: ${{ steps.version.outputs.new-version }}
          CHANGELOG: ${{ steps.version.outputs.changelog }}
          REPO: ${{ github.repository }}
        run: |
          # Write release notes to file to handle special characters
          cat > release-notes.md << EOF
          ## What's Changed

          ${CHANGELOG}

          ## Usage

          \`\`\`yaml
          - name: Auto Version Bump
            uses: ${REPO}@v${NEW_VERSION}
            with:
              gemini-api-key: YOUR_GEMINI_KEY_HERE
          \`\`\`
          EOF

          gh release create "v$NEW_VERSION" \
            --title "Release v$NEW_VERSION" \
            --notes-file release-notes.md

      - name: Update major version tag
        if: steps.version.outputs.version-bumped == 'true'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          MAJOR_TAG="v$(echo $NEW_VERSION | cut -d. -f1)"
          git tag -fa $MAJOR_TAG -m "Update $MAJOR_TAG tag to v$NEW_VERSION"
          git push origin $MAJOR_TAG --force
